as.POSIXct(strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%m/%d/%Y %H:%M:%S"), origin ="1970-01-01"),
as.POSIXct(strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%Y-%m-%d %H:%M:%S")\, origin ="1970-01-01")
))
moms.movie[[moms.movie.index.complete[i]]]  %>%
mutate(pid = pids.movie.2[i]) %>%
mutate(local.time = ifelse(
grepl("/", Date.abs..yyyy.mm.dd.),
as.POSIXct(strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%m/%d/%Y %H:%M:%S"), origin ="1970-01-01"),
as.POSIXct(strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%Y-%m-%d %H:%M:%S"), origin ="1970-01-01")
))
moms.movie[[moms.movie.index.complete[i]]]  %>%
mutate(pid = pids.movie.2[i]) %>%
mutate(local.time = ifelse(
grepl("/", Date.abs..yyyy.mm.dd.),
as.POSIXct(strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%m/%d/%Y %H:%M:%S")),
as.POSIXct(strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%Y-%m-%d %H:%M:%S"))
))
moms.movie[[moms.movie.index.complete[i]]]  %>%
mutate(pid = pids.movie.2[i]) %>%
mutate(local.time = ifelse(
grepl("/", Date.abs..yyyy.mm.dd.),
strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%m/%d/%Y %H:%M:%S"),
strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%Y-%m-%d %H:%M:%S")
))
moms.movie[[moms.movie.index.complete[i]]]  %>%
mutate(pid = pids.movie.2[i]) %>%
mutate(local.time = ifelse(
grepl("/", Date.abs..yyyy.mm.dd.),
strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%m/%d/%Y %H:%M:%S"),
strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%Y-%m-%d %H:%M:%S")
))
# Get data of selected variables from selected moms
moms.movie.2 <- lapply(1:length(pids.movie.2), function(i){
tryCatch({
output <- moms.movie[[moms.movie.index.complete[i]]]  %>%
mutate(pid = pids.movie.2[i])
if (grepl("/", output$Date.abs..yyyy.mm.dd[1])) {
output <- output %>%
mutate(local.time = as.POSIXct(strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "%m/%d/%Y %H:%M:%S")))
} else{
output <- output %>%
mutate(local.time = as.POSIXct(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.)))
}
output <- output %>%
select(pid,
local.time,
act.expd = "ActivityEnergyExpenditure..kcal.d.",
incl.down = "InclinationDown..deg.",
incl.forw = "InclinationForward..deg.",
incl.right = "InclinationRight..deg.",
met = "MET...",
accl = "MovementAcceleration..g.",
stp.ct = "StepCount..steps.",
temp.mean = "TempMean...",
tot.expd = "TotalEnergyExpenditure..kcal.d.",
vert.spd = "VerticalSpeed..m.s.")
return(output)
}, error = function(e) {})
})
sapply(moms.movie.2, nrow) # check to make sure every pid has data
moms.movie.2[[3]]
moms.movie.2[[1]]
moms.movie[[1]]
library(dplyr)
library(RCurl)
library(RJSONIO)
library(ggplot2)
library(lubridate)
library(tidyr)
library(reshape2)
library(tm)
library(topicmodels)
library(lda)
library(rstan)
library(slam)
library(shinystan)
1+!
1+!
1+1
library(dplyr)
library(RCurl)
library(RJSONIO)
library(ggplot2)
library(lubridate)
library(tidyr)
library(reshape2)
library(tm)
library(topicmodels)
library(lda)
library(rstan)
library(slam)
library(shinystan)
library(bayesplot)
file.path <- "/Users/cw29265-admin/Documents/LDA_EMA/"
setwd(file.path)
data.path.kaya <- "/Users/cw29265-admin/Documents/Kaya_physio/"
wc <- read.csv(paste0(data.path.kaya, "LENA_HOURLY.csv"))
# To extract: AWC_COUNT, TV_Secs, Noise
moms.wc <- wc %>% filter(Recording_Gender == "F", duration_percenthour > 0.5) %>% # there are only two observations with duration_percenthour <0.1 all else are >=0.72
mutate(date.time = strptime(substr(as.character(EndTime), 1, 17), format = "%m/%d/%y %H:%M:%S")) %>%
select(pid = ChildKey, date.time, AWC_COUNT, TV_Secs, Noise)
length(unique(moms.wc$pid)) # 25 moms
pids.wc <- as.character(unique(moms.wc$pid))
pids.movie <- substr(list.files(data.path.kaya)[grepl("P.*.1_", list.files(data.path.kaya))], 1,3)
moms.movie <- lapply(list.files(data.path.kaya, full.names = T)[grepl("P.*.1_", list.files(data.path.kaya))], read.csv)
which(sapply(moms.movie, function(x) "ActivityEnergyExpenditure..kcal.d." %in% names(x))) # this seems to be the smallest subset, tied with some other variables
which(sapply(moms.movie, function(x) "InclinationDown..deg." %in% names(x)))
moms.movie.index.complete <- which(sapply(moms.movie, function(x) "ActivityEnergyExpenditure..kcal.d." %in% names(x)))
pids.movie.2 <- pids.movie[moms.movie.index.complete]
# Get data of selected variables from selected moms
moms.movie.2 <- lapply(1:length(pids.movie.2), function(i){
tryCatch({
output <- moms.movie[[moms.movie.index.complete[i]]]  %>%
mutate(pid = pids.movie.2[i])
if (grepl("/", output$Date.abs..yyyy.mm.dd[1])) {
output <- output %>%
mutate(local.time = as.POSIXct(strptime(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.), format = "c"))) # one participant's date format is different; addressing that
} else{
output <- output %>%
mutate(local.time = as.POSIXct(paste(Date.abs..yyyy.mm.dd., Time.abs..hh.mm.ss.)))
}
output <- output %>%
select(pid,
local.time,
act.expd = "ActivityEnergyExpenditure..kcal.d.",
incl.down = "InclinationDown..deg.",
incl.forw = "InclinationForward..deg.", # heavily right skewed
incl.right = "InclinationRight..deg.",
met = "MET...",
accl = "MovementAcceleration..g.", # heavily right skewed
stp.ct = "StepCount..steps.", # heavily right skewed
temp.mean = "TempMean...",
tot.expd = "TotalEnergyExpenditure..kcal.d.", # heavily right skewed
vert.spd = "VerticalSpeed..m.s.")
return(output)
}, error = function(e) {})
})
sapply(moms.movie.2, nrow) # check to make sure every pid has data
moms.movie.2[[1]]
moms.movie.df <- bind_rows(moms.movie.2) %>% filter_all(~!is.na(.)) %>% select(-act.expd, -met)
lapply(pids.movie.2, function(x){
summary(moms.movie.df %>% filter(pid == x))
})
moms.movie.hourly <- moms.movie.df %>% mutate(rounded.time = round_date(local.time, "60 minutes")) %>%
group_by(pid, rounded.time) %>% summarize_all(~first(.)) %>% ungroup() %>%
select(pid, time = rounded.time, incl.down, incl.forw, incl.right, accl, stp.ct, temp.mean, tot.expd, vert.spd) %>% as.data.frame()
moms.movie.hourly.centered <- moms.movie.df %>% mutate(rounded.time = round_date(local.time, "60 minutes")) %>%
group_by(pid, rounded.time) %>% summarize_all(~first(.)) %>% ungroup() %>%
group_by(pid) %>% mutate_at(vars(-pid, -rounded.time, -local.time), ~ scale(.)) %>%
select(pid, time = rounded.time, incl.down, incl.forw, incl.right, accl, stp.ct, temp.mean, tot.expd, vert.spd) %>% as.data.frame()
# log transform doesn't quite fix the non-Gaussianity of accl and stp.ct (when log of stp.ct shows normalcy it's because it discarded 0s); did fix tot.expd
moms.movie.hourly.transformed <- moms.movie.df %>% mutate(rounded.time = round_date(local.time, "60 minutes")) %>%
group_by(pid, rounded.time) %>% summarize_all(~first(.)) %>% ungroup() %>%
mutate(log.accl = log(accl), log.stp.ct = log(stp.ct + 1), log.incl.forw = log(incl.forw), log.tot.expd = log(tot.expd)) %>%
# group_by(pid) %>% mutate_at(vars(-pid, -rounded.time, -local.time), ~ scale(.)) %>% ungroup() %>%
select(pid, time = rounded.time, incl.down, log.incl.forw, incl.right, temp.mean, log.tot.expd, vert.spd) %>% as.data.frame()
hist(moms.movie.hourly.transformed$incl.down)
hist(moms.movie.hourly.transformed$log.incl.forw)
hist(moms.movie.hourly.transformed$incl.right)
hist(moms.movie.hourly.transformed$temp.mean)
hist(moms.movie.hourly.transformed$log.tot.expd)
hist(moms.movie.hourly.transformed$vert.spd)
# Do GLDA (on transformed data; first tried on original data, results not right)
K = 3
V = 6 # incl.down, log.incl.forw, incl.right, temp.mean, log.tot.expd, vert.spd
stan_data <- list(
K = K,
V = V,
M = length(unique(moms.movie.hourly.transformed$pid)),
N = nrow(moms.movie.hourly.transformed),
w = moms.movie.hourly.transformed[,3:8], # can be a data.frame?
pid = as.integer(factor(moms.movie.hourly.transformed$pid)),
alpha = rep(1, K),
nu = V + 3,
psi = diag(V),
mu0 = rep(0, V),
kappa = 1
)
stan_data$pid
fit_rstan_moms_movie <- stan(
file = "ema.stan",
data = stan_data,
chains = 1,     # default is 4
iter = 1000,    # default is 2000
warmup = 200    # default is half of iter
)
saveRDS(fit_rstan_moms_movie, "fit_rstan_moms_movie_transformed.rds")
fit_rstan <- fit_rstan_moms_movie
rstan::traceplot(fit_rstan, pars = paste('mu[', 1:3, ',2]', sep = ''), inc_warmup = T) # check convergence, should converge after warmup ends
theta <- apply(extract(fit_rstan)$theta[1:800, ,], c(2,3), mean)
mu <- apply(extract(fit_rstan)$mu[1:800, ,], c(2,3), mean)
sigma <- apply(extract(fit_rstan)$sigma[1:800, , ,], c(2,3,4), mean) # 3 by 10 by 10
theta
mu
moms.movie.hourly.centered <- moms.movie.df %>% mutate(rounded.time = round_date(local.time, "60 minutes")) %>%
group_by(pid, rounded.time) %>% summarize_all(~first(.)) %>% ungroup() %>%
group_by(pid) %>% mutate_at(vars(-pid, -rounded.time, -local.time), ~ scale(.)) %>%
select(pid, time = rounded.time, incl.down, incl.forw, incl.right, accl, stp.ct, temp.mean, tot.expd, vert.spd) %>% as.data.frame()
moms.movie.hourly.centered
# Do GLDA (on centered data; first tried on original data, results not right)
K = 3
V = 8
stan_data <- list(
K = K,
V = V,
M = length(unique(moms.movie.hourly.centered$pid)),
N = nrow(moms.movie.hourly.centered),
w = moms.movie.hourly.centered[,3:10], # can be a data.frame?
pid = as.integer(factor(moms.movie.hourly.centered$pid)),
alpha = rep(1, K),
nu = V + 4,
psi = diag(V),
mu0 = rep(0, V),
kappa = 1
)
fit_rstan_moms_movie <- stan(
file = "ema.stan",
data = stan_data,
chains = 1,     # default is 4
iter = 1000,    # default is 2000
warmup = 200    # default is half of iter
)
saveRDS(fit_rstan_moms_movie, "fit_rstan_moms_movie_centered.rds")
fit_rstan <- fit_rstan_moms_movie
rstan::traceplot(fit_rstan, pars = paste('mu[', 1:3, ',2]', sep = ''), inc_warmup = T) # check convergence, should converge after warmup ends
theta <- apply(extract(fit_rstan)$theta[1:800, ,], c(2,3), mean)
mu <- apply(extract(fit_rstan)$mu[1:800, ,], c(2,3), mean)
sigma <- apply(extract(fit_rstan)$sigma[1:800, , ,], c(2,3,4), mean) # 3 by 10 by 10
theta
mu
plot(mu[1,], type ="l")
mu
as.data.frame(mu) %>% rowwise()
as.data.frame(mu) %
as.data.frame(mu)
theta
as.data.frame(mu)
as.data.frame(mu) %>% melt()
as.data.frame(mu) %>% melt() %>% mutate(variable = as.factor(variable))
as.data.frame(mu) %>% melt() #%>% mutate(variable = as.factor(variable))
as.data.frame(mu) %>% melt() %>% `colnames<-`() #%>% mutate(variable = as.factor(variable))
as.data.frame(mu) %>% melt() %>% `colnames<-`(c("K1", "K2", "K3")) #%>% mutate(variable = as.factor(variable))
as.data.frame(mu) %>% `colnames<-`(c("K1", "K2", "K3")) %>% melt() %>%  #%>% mutate(variable = as.factor(variable))
# Look at word count and movie sense together
pids.wc # 25 moms had word count data
as.data.frame(mu) %>% `colnames<-`(c("K1", "K2", "K3")) %>% melt()  #%>% mutate(variable = as.factor(variable))
as.data.frame(mu) %>% `colnames<-`(c("K1", "K2", "K3")) #%>% melt()  #%>% mutate(variable = as.factor(variable))
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) #%>% melt()  #%>% mutate(variable = as.factor(variable))
names(moms.movie.hourly.centered)
names(moms.movie.hourly.centered)[3:!0]
names(moms.movie.hourly.centered)[3:10]
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>% mutate(variable = names(moms.movie.hourly.centered)[3:10]) %>% melt()  #%>% mutate(variable = as.factor(variable))
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>% mutate(item = names(moms.movie.hourly.centered)[3:10]) %>% melt()  #%>% mutate(variable = as.factor(variable))
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(item = names(moms.movie.hourly.centered)[3:10]) %>% melt() %>%
`colnames<-`(c("item", "cluster", "value"))
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(item = names(moms.movie.hourly.centered)[3:10]) %>% melt() %>%
`colnames<-`(c("item", "cluster", "value"))
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(item = names(moms.movie.hourly.centered)[3:10]) %>% melt() %>%
`colnames<-`(c("item", "cluster", "value")) %>% mutate(cluster = as.factor(cluster))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line()
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = 1:8) %>% melt() %>%
`colnames<-`(c("item", "cluster", "value")) %>% mutate(cluster = as.factor(cluster))
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = factor(1:8)) %>% melt() %>%
`colnames<-`(c("item", "cluster", "value")) %>% mutate(cluster = as.factor(cluster))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line()
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = factor(1:8)) %>% melt() %>%
`colnames<-`(c("index", "cluster", "value")) %>% mutate(cluster = as.factor(cluster))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line()
ggplot(mu.for.plot, aes(x = index, y = value, color = cluster)) + theme_bw() +
geom_line()
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = 1:8)
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = 1:8) %>% melt()
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = 1:8) %>% spread(index)
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = 1:8) %>% spread(index)
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = 1:8) %>% gather(index) %>%
`colnames<-`(c("index", "cluster", "value")) %>% mutate(cluster = as.factor(cluster))
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = 1:8) %>% gather(index)
mu
as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(cluster = 1:8) %>% gather(cluster) %>% mutate(item = rep(names(moms.movie.hourly.centered)[3:10], 3))
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(cluster = 1:8) %>% gather(cluster) %>% mutate(item = as.factor(rep(names(moms.movie.hourly.centered)[3:10], 3)))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line()
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(cluster = 1:8) %>% gather(cluster) %>% mutate(item = as.factor(rep(3)))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line()
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(cluster = 1:8) %>% gather(cluster) %>% mutate(item = as.factor(rep(1:8, 3)))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line()
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(cluster = 1:8) %>% gather(cluster) %>% mutate(item = rep(1:8, 3))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line()
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K=1", "K=2", "K=3")) %>%
mutate(cluster = 1:8) %>% gather(cluster) %>% mutate(item = rep(1:8, 3))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line() +
scale_x_continuous(breaks = 1:10, labels = names(moms.movie.hourly.centered)[3:10], name = "kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.1), name = "normalized value") +
# scale_color_discrete(name = "cluster", limits = c("high", "low", "med")) +
theme(panel.grid.minor.x = element_blank(), legend.position = "none",
axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line() +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.1), name = "normalized value") +
# scale_color_discrete(name = "cluster", limits = c("high", "low", "med")) +
theme(panel.grid.minor.x = element_blank(), legend.position = "none",
axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line() +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.5), name = "normalized value") +
# scale_color_discrete(name = "cluster", limits = c("high", "low", "med")) +
theme(panel.grid.minor.x = element_blank(), legend.position = "none",
axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
mu.for.plot <- as.data.frame(t(mu)) %>% `colnames<-`(c("K1", "K2", "K3")) %>%
mutate(cluster = 1:8) %>% gather(cluster) %>% mutate(item = rep(1:8, 3))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line() +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.5), name = "normalized value") +
# scale_color_discrete(name = "cluster", limits = c("high", "low", "med")) +
theme(panel.grid.minor.x = element_blank(), legend.position = "none",
axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
mu.for.plot
ggplot(mu.for.plot, aes(x = item, y = value, color = as.factor(cluster))) + theme_bw() +
geom_line() +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.5), name = "normalized value") +
# scale_color_discrete(name = "cluster", limits = c("high", "low", "med")) +
theme(panel.grid.minor.x = element_blank(), legend.position = "none",
axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line()
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line() +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.5), name = "normalized value")
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line() +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.5), name = "normalized value") +
# scale_color_discrete(name = "cluster", limits = c("high", "low", "med")) +
theme(panel.grid.minor.x = element_blank(),
axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line() +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "mothers' kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.5), name = "normalized value") +
# scale_color_discrete(name = "cluster", limits = c("high", "low", "med")) +
theme(panel.grid.minor.x = element_blank(),
axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
ggplot(mu.for.plot, aes(x = item, y = value, color = cluster)) + theme_bw() +
geom_line(size = 1) +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "mothers' kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,2.5,0.5), name = "normalized value") +
# scale_color_discrete(name = "cluster", limits = c("high", "low", "med")) +
theme(panel.grid.minor.x = element_blank(),
axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
theta
library(mclust)
moms.movie.hourly.centered
X.moms <- moms.movie.hourly.centered %>% select(-pid, -time)
gmm.moms <- Mclust(X.moms, G = 3, modelName = c('EII', 'VII', 'EEI', 'VEI', 'EVI', 'VVI'))
mu <- gmm.moms$parameters$mean
avg <- as.numeric(as.data.frame(mu) %>% apply(2, sum))
mu
mu.df <- as.data.frame(mu) %>%
`colnames<-`(factor(rank(avg), labels = c("K1", "K2", "K3"))) %>%
mutate(index = factor(1:8)) %>% melt()
mu.df
mu.df <- as.data.frame(mu) %>%
`colnames<-`(factor(rank(avg), labels = c("K1", "K2", "K3"))) %>%
mutate(index = factor(1:8)) %>% melt() %>% `colnames<-`(c("index","cluster","value"))
mu.df
ggplot(mu.df, aes(x = as.numeric(index), y = value, color = variable)) + theme_bw() + geom_line(size = 1) +
scale_x_continuous(breaks = 1:10, labels = names(data.centered)[3:12], name = "EMA item") +
scale_y_continuous(breaks = seq(-1,1,0.1), name = "normalized value") +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_color_discrete(name = "cluster", limits = c("high", "med", "low")) +
theme(panel.grid.minor.x = element_blank(), legend.position = "none")
ggplot(mu.df, aes(x = as.numeric(index), y = value, color = cluster)) + theme_bw() + geom_line(size = 1) +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "mothers' kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,1,0.1), name = "normalized value") +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_color_discrete(name = "GMM cluster") +
theme(panel.grid.minor.x = element_blank())
ggplot(mu.df, aes(x = as.numeric(index), y = value, color = cluster)) + theme_bw() + geom_line(size = 1) +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "mothers' kinesio/physiological measure") +
scale_y_continuous(breaks = seq(-1,1,0.1), name = "normalized value") +
scale_color_discrete(name = "GMM cluster") +
theme(panel.grid.minor.x = element_blank())
ggplot(mu.df, aes(x = as.numeric(index), y = value, color = cluster)) + theme_bw() + geom_line(size = 1) +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "mothers' kinesio/physiological measure") +
# scale_y_continuous(breaks = seq(-1,2,0.1), name = "normalized value") +
scale_color_discrete(name = "GMM cluster") +
theme(panel.grid.minor.x = element_blank())
# avg <- as.numeric(as.data.frame(mu) %>% apply(2, sum))
mu.df <- as.data.frame(mu) %>%
`colnames<-`(c("K1", "K2", "K3")) %>%
mutate(index = factor(1:8)) %>% melt() %>% `colnames<-`(c("index","cluster","value"))
mu.df
ggplot(mu.df, aes(x = as.numeric(index), y = value, color = cluster)) + theme_bw() + geom_line(size = 1) +
scale_x_continuous(breaks = 1:8, labels = names(moms.movie.hourly.centered)[3:10], name = "mothers' kinesio/physiological measure") +
# scale_y_continuous(breaks = seq(-1,2,0.1), name = "normalized value") +
scale_color_discrete(name = "GMM cluster") +
theme(panel.grid.minor.x = element_blank())
moms.movie.hourly.centered %>% mutate(cluster = gmm$classification)
moms.movie.hourly.centered %>% mutate(cluster = gmm.moms$classification) %>% group_by(pid) %>%
summarize(low = length(which(cluster == 3))/n(), med = length(which(cluster == 1))/n(), high = length(which(cluster == 2))/n()) %>% as.data.frame()
moms.movie.hourly.centered %>% mutate(cluster = gmm.moms$classification) %>% as.data.frame()
mu.df
mu
gmm.moms$classification
moms.movie.hourly.centered %>% mutate(cluster = gmm.moms$classification) %>% group_by(pid) %>%
summarize(K1 = length(which(cluster == 1))/n(), K2 = length(which(cluster == 2))/n(), K3 = length(which(cluster == 3))/n()) %>% as.data.frame()
theta
theta.gmm <- moms.movie.hourly.centered %>% mutate(cluster = gmm.moms$classification) %>% group_by(pid) %>%
summarize(K1 = length(which(cluster == 1))/n(), K2 = length(which(cluster == 2))/n(), K3 = length(which(cluster == 3))/n()) %>% as.data.frame()
as.data.frame(theta)
as.data.frame(theta) %>% mutate(K1 = V2, K2 = V3, K3 = V1)
cor(theta[,2], )as.integer(factor(moms.movie.hourly.centered$pid))
as.integer(factor(moms.movie.hourly.centered$pid))
length(unique(moms.movie.hourly.centered$pid))
as.data.frame(theta) %>% mutate(K1 = V2, K2 = V3, K3 = V1) %>% select(K1, K2, K3)
theta.glda <- as.data.frame(theta) %>% mutate(K1 = V2, K2 = V3, K3 = V1) %>% select(K1, K2, K3)
cor(theta.glda$K1, theta.gmm$K1)
cor(theta.glda$K2, theta.gmm$K2)
cor(theta.glda$K3, theta.gmm$K3)
fit_rstan <- readRDS("fit_rstan_glda.rds") # used this for the following analyses! This one was run on 3 mcmc chains, each chain with 1000 iterations with first 200 being warmup iterations (gave warning about too few iterations)
# Prepare data for STAN specification
data <- bind_rows(lapply(list.files(data.path), function(p) {read.csv(paste0(data.path, p, "/dat.csv")) %>%
dplyr::select(-X, -Survey.Creation.Date) %>% mutate(pid = p)})) %>%
dplyr::select(-How.many.hours.did.you.sleep.last.night, -Experienced.difficulty.falling.or.staying.asleep, -Experienced.restless.or.unsatisfying.sleep,
-X.1, -X.2, -X.3, -X.4, -X.5, -X.6, -Felt.tense, -Felt.judged.or.criticized) %>%
filter(!is.na(Felt.energetic)) %>%
dplyr::select(pid = pid, time = Survey.Completion.Date, irritable = Felt.irritable, angry = Felt.angry, afraid = Felt.frightened.or.afraid, worried = Felt.worried, ruminating = Dwelled.on.the.past,
down = Felt.down.or.depressed, hopeless = Felt.hopeless, anhedonic = Experienced.loss.of.interest.or.pleasure, avoidact = Avoided.activities, avoidpeople = Avoided.people)
data.descriptive <- data %>% group_by(pid) %>% summarize_at(vars(irritable:avoidpeople), mean) %>% as.data.frame()
data.path <- "/Users/cw29265-admin/Documents/LDA_EMA/Peter Wu Shared Data/Fisher and Bosley Data/Within Subject/"
pids <- list.files(data.path)
# Prepare data for STAN specification
data <- bind_rows(lapply(list.files(data.path), function(p) {read.csv(paste0(data.path, p, "/dat.csv")) %>%
dplyr::select(-X, -Survey.Creation.Date) %>% mutate(pid = p)})) %>%
dplyr::select(-How.many.hours.did.you.sleep.last.night, -Experienced.difficulty.falling.or.staying.asleep, -Experienced.restless.or.unsatisfying.sleep,
-X.1, -X.2, -X.3, -X.4, -X.5, -X.6, -Felt.tense, -Felt.judged.or.criticized) %>%
filter(!is.na(Felt.energetic)) %>%
dplyr::select(pid = pid, time = Survey.Completion.Date, irritable = Felt.irritable, angry = Felt.angry, afraid = Felt.frightened.or.afraid, worried = Felt.worried, ruminating = Dwelled.on.the.past,
down = Felt.down.or.depressed, hopeless = Felt.hopeless, anhedonic = Experienced.loss.of.interest.or.pleasure, avoidact = Avoided.activities, avoidpeople = Avoided.people)
ggplot(data.descriptive) + theme_bw() +
geom_density(aes(x = hopeless))  +
geom_rug(aes(x = hopeless, y = 0), position = position_jitter(height = 0)) +
geom_vline(xintercept = mean(data.descriptive$hopeless), color = "red", size = 1.2) +
geom_rect(xmin = mean(data.descriptive$hopeless) - sd(data.descriptive$hopeless), xmax = mean(data.descriptive$hopeless) + sd(data.descriptive$hopeless),
ymin = -Inf, ymax = Inf, fill = "orange", alpha = 0.01) +
scale_x_continuous(breaks = seq(0, 100, 10), limits = c(0,100)) +
theme(axis.text=element_text(size=12), axis.title.x=element_text(size=14,face="bold"), axis.title.y=element_text(size=14))
# Scale each variable to zero mean unit sd by the participant
data.centered <- data %>% group_by(pid) %>% mutate_at(vars(-pid, -time), ~ scale(.)) %>% as.data.frame()
data.centered
dim(rstan::extract(fit_rstan)$theta) # number of post-warmup draws * number of participants (M) * number of clusters (K)
dim(rstan::extract(fit_rstan)$mu) # number of post-warmup draws * number of clusters (K) * number of features (V)
# directly extract results from the fit_rstan object
n_chains <- length(summary(fit_rstan)$c_summary[1, 1,])
mu.df.all <- data.frame(index = rep(1:10,3), variable = c(rep("high",10), rep("low", 10), rep("med",10)))
mu.df.all
theta <- apply(extract(fit_rstan)$theta[1:800, ,], c(2,3), mean) # M=45 by K=3
mu <- apply(extract(fit_rstan)$mu[1:800, ,], c(2,3), mean) # K=3 by V=10
theta
X <- data.centered %>% select(-pid, -time)
gmm <-Mclust(X, G = 3, modelName = c('EII', 'VII', 'EEI', 'VEI', 'EVI', 'VVI'))
mu <- gmm$parameters$mean
avg <- as.numeric(as.data.frame(mu) %>% apply(2, sum))
mu.df <- as.data.frame(mu) %>%
`colnames<-`(factor(rank(avg), labels = c("low", "med", "high"))) %>%
mutate(index = factor(1:10)) %>% melt()
mu.df
data.centered %>% mutate(cluster = gmm$classification) %>% group_by(pid) %>%
summarize(low = length(which(cluster == 3))/n(), med = length(which(cluster == 1))/n(), high = length(which(cluster == 2))/n()) %>% as.data.frame()
as.data.frame(theta)
as.data.frame(theta) %>% `colnames<-`(factor(rank(avg), labels = c("low", "med", "high")))
mu <- apply(extract(fit_rstan)$mu[1:800, ,], c(2,3), mean) # K=3 by V=10
avg <- as.numeric(as.data.frame(mu) %>% apply(2, sum))
avg
avg <- as.numeric(as.data.frame(mu) %>% apply(1, sum))
avg
as.data.frame(theta) %>% `colnames<-`(factor(rank(avg), labels = c("low", "med", "high")))
theta.glda <- as.data.frame(theta) %>% `colnames<-`(factor(rank(avg), labels = c("low", "med", "high")))
theta.gmm <- data.centered %>% mutate(cluster = gmm$classification) %>% group_by(pid) %>%
summarize(low = length(which(cluster == 3))/n(), med = length(which(cluster == 1))/n(), high = length(which(cluster == 2))/n()) %>% as.data.frame()
cor(theta.glda$low, theta.gmm$low)
cor(theta.glda$high, theta.gmm$high)
cor(theta.glda$med, theta.gmm$med)
